##########################################################################################################################
# File automatically-generated by STM32forVSCode
##########################################################################################################################

# ------------------------------------------------
# Makefile used by STM32 For VSCode
# WARNING: This file can be overwritten when project settings change
# This Makefile can be used for CI/CD purposes to use it please make sure
# you setup an environment file with the following name: .stm32env.
# This file is sourced at the start of this Makefile and will be used to set
# compiler paths and other tooling paths.
# Do note that most variables can also be overwritten when invoking make
# e.g to change the optimization flags
# make -j 16 -f STM32Make.mk DEBUG=0 OPTIMIZATION=-Os
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
#   2023-06-16 - Added .stm32env file inclusion
#   2023-07-14 - Added file directory in the build folder
#							 - Added debug and release build options
#							 - Added multi platform support
#							 - Added help target
#							 - Added more documentation
# ------------------------------------------------

######################################
# Environment Variables
######################################
# Imports the environment file in which the compiler and other tooling is set
# for the build machine.
# This can also be used to overwrite some makefile variables
file_exists = $(or $(and $(wildcard $(1)),1),0)
ifeq ($(call file_exists,.stm32env),1)
  include .stm32env
endif

######################################
# Target
######################################
# This is the name of the embedded target which will be build
# The final file name will also have debug or release appended to it.
TARGET ?= CoinDetect

#######################################
# Build directories
#######################################
# Build path can be overwritten when calling make or setting the environment variable
# in .stm32env

BUILD_DIRECTORY ?= build


######################################
# Optimization
######################################
# Optimization is switched based upon the DEBUG variable. If set to 1
# it will be build in debug mode with the Og optimization flag (optimized for debugging).
# If set to 0 (false) then by default the variable is used in the configuration yaml
# This can also be overwritten using the environment variable or by overwriting it
# by calling make with the OPTIMIZATION variable e.g.:
# make -f STM32Make.mk -j 16  OPTIMIZATION=Os

# variable which determines if it is a debug build
DEBUG ?= 1

# debug flags when debug is defined
OPTIMIZATION ?= -Os

RELEASE_DIRECTORY = $(BUILD_DIRECTORY)/debug
ifeq ($(DEBUG),1)
  # Sets debugging optimization -Og and the debug information output
  OPTIMIZATION_FLAGS += -Og -g -gdwarf -ggdb
  $(TARGET) := $(TARGET)-debug
  RELEASE_DIRECTORY := $(BUILD_DIRECTORY)/debug
else
  OPTIMIZATION_FLAGS += $(OPTIMIZATION)
  $(TARGET) := $(TARGET)-release
  RELEASE_DIRECTORY := $(BUILD_DIRECTORY)/release
endif

######################################
# Definitions
######################################

# C definitions
C_DEFINITIONS =  \
-DSTM32F411xE \
-DUSE_HAL_DRIVER


# C++ definitions
CXX_DEFINITIONS =  \
-DSTM32F411xE \
-DUSE_HAL_DRIVER


# Assembly definitions
ASM_DEFINITIONS =  \


######################################
# Source Files
######################################


# C sources
C_SOURCES +=  \
Core/Src/adc.c \
Core/Src/dma.c \
Core/Src/gpio.c \
Core/Src/main.c \
Core/Src/spi.c \
Core/Src/stm32f4xx_hal_msp.c \
Core/Src/stm32f4xx_it.c \
Core/Src/system_stm32f4xx.c \
Core/Src/tim.c \
Core/Src/usart.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_adc.c \
icode/AD9833/AD9833.c \
icode/AD9834/AD9834.c \
icode/FFT/FFTv2.c \
icode/HMI/HMI.c \
icode/Retarget/Retarget.c


CXX_SOURCES += \


# ASM sources
ASM_SOURCES +=  \
startup_stm32f411xe.s



######################################
# Include Directories
######################################
# assembly includes
ASM_INCLUDES = \

# C includes
C_INCLUDES =  \
-ICore/Inc \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-Iicode/AD9833 \
-Iicode/AD9834 \
-Iicode/FFT \
-Iicode/HMI \
-Iicode/Retarget



######################################
# Target System Flags
######################################
# The specific flags for the target system
# This sets things like hardware floating point and
# which version a specific Cortex-M processor is.

# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU_FLAGS = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)


######################################
# C and CPP Flags
######################################

# additional flags provided by the STM32 for VSCode configuration file
ADDITIONAL_C_FLAGS := -fdata-sections -ffunction-sections 
ADDITIONAL_CXX_FLAGS := -fdata-sections -feliminate-unused-debug-types -ffunction-sections -fno-exceptions -fno-rtti 
ADDITIONAL_ASM_FLAGS := -fdata-sections -ffunction-sections 

# Provides dependency information about header files
# This is used to recompile when a source file depends on
# information from a header file
DEPENDENCY_FLAGS = -MMD -MP -MF"$(@:%.o=%.d)"

# Output a list file for the compiled source file.
# This is a representative of the source code in assembly
ASSEMBLER_LIST_OUTPUT_FLAG = -Wa,-a,-ad,-alms=$(call add_release_directory,$<,lst)

# Combining the compilation flags with language specific flags and MCU specific flags
C_FLAGS = \
$(MCU_FLAGS) \
$(C_DEFINITIONS) \
$(C_INCLUDES) \
$(OPTIMIZATION_FLAGS) \
$(DEPENDENCY_FLAGS) \
$(ADDITIONAL_C_FLAGS) \
$(ASSEMBLER_LIST_OUTPUT_FLAG)

CXX_FLAGS = \
$(MCU_FLAGS) \
$(CXX_DEFINITIONS) \
$(C_INCLUDES) \
$(OPTIMIZATION_FLAGS) \
$(DEPENDENCY_FLAGS) \
$(ADDITIONAL_CXX_FLAGS) \
$(ASSEMBLER_LIST_OUTPUT_FLAG)

ASM_FLAGS = $(C_FLAGS) $(ASM_DEFINITIONS) $(ADDITIONAL_ASM_FLAGS)

######################################
# Linker Flags
######################################
# linker script. This script will determine where certain sections will
# be place in memory.
# For a good reference look at: https://blog.thea.codes/the-most-thoroughly-commented-linker-script/
LINKER_SCRIPT := -TSTM32F411CCUx_FLASH.ld

# libraries
LIBRARIES := \
-lc \
-lm \
-lnosys


# library directories
LIBRARY_DIRECTORIES := \


# Additional linker flags Flags from the yaml configuration file
# can be overwritten in the environment file
ADDITIONAL_LINKER_FLAGS ?= -u _printf_float

# Flags for outputting a map file
# -Wl,-Map= flag will output the map file to the specified file
# --cref will generate a cross reference table in the map file
LINKER_MAP_FLAGS ?= -Wl,-Map=$(addsuffix .map,$(basename $(@))),--cref

# Flags for cleaning up code at link time
# --gc-sections will eliminate dead code e.g. unused functions
LINKER_CLEAN_UP_FLAGS ?= -Wl,--gc-sections

LINKER_FLAGS = \
  $(MCU_FLAGS) \
  $(LINKER_SCRIPT) \
  $(LIBRARY_DIRECTORIES) \
  $(LIBRARIES) \
  $(LINKER_MAP_FLAGS) \
  $(LINKER_CLEAN_UP_FLAGS) \
  $(ADDITIONAL_LINKER_FLAGS)

#######################################
# Tools
#######################################
ARM_PREFIX = arm-none-eabi-
POSTFIX = "
PREFIX = "
# The gcc compiler bin path can be defined in the make command via ARM_GCC_PATH variable (e.g.: make ARM_GCC_PATH=xxx)
# or it can be added to the PATH environment variable.
# By default the variable be used from the environment file: .stm32env.
# if it is not defined

ifdef ARM_GCC_PATH
    CC = $(PREFIX)$(ARM_GCC_PATH)/$(ARM_PREFIX)gcc$(POSTFIX)
    CXX = $(PREFIX)$(ARM_GCC_PATH)/$(ARM_PREFIX)g++$(POSTFIX)
    AS = $(PREFIX)$(ARM_GCC_PATH)/$(ARM_PREFIX)gcc$(POSTFIX) -x assembler-with-cpp
    CP = $(PREFIX)$(ARM_GCC_PATH)/$(ARM_PREFIX)objcopy$(POSTFIX)
    SZ = $(PREFIX)$(ARM_GCC_PATH)/$(ARM_PREFIX)size$(POSTFIX)
else
  CC ?= $(ARM_PREFIX)gcc
  CXX ?= $(ARM_PREFIX)g++$
  AS ?= $(ARM_PREFIX)gcc -x assembler-with-cpp
  CP ?= $(ARM_PREFIX)objcopy
  SZ ?= $(ARM_PREFIX)size
endif

HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

# Flash and debug tools
# Default is openocd however will be gotten from the
OPENOCD ?= openocd

REMOVE_DIRECTORY_COMMAND = rm -fR
mkdir_function = mkdir -p $(1)
ifeq ($(OS),Windows_NT)
  convert_to_windows_path = $(strip $(subst /,\,$(patsubst %/,%,$(1))))
  REMOVE_DIRECTORY_COMMAND = cmd /c rd /s /q
  mkdir_function = cmd /e:on /c md $(call convert_to_windows_path,$(1))
endif

#######################################
# Build rules
#######################################

add_release_directory = $(sort $(addprefix $(RELEASE_DIRECTORY)/,$(addsuffix .$(2),$(basename $(1)))))

OBJECTS = $(call add_release_directory,$(C_SOURCES),o)
# objects for the different C++ file extensions
OBJECTS += $(call add_release_directory,$(CXX_SOURCES),o)
# Objects for assembly code
OBJECTS += $(call add_release_directory,$(ASM_SOURCES),o)

# Dependency files
DEPENDENCY_FILES = $(sort $(OBJECTS:.o=.d))

# the tree of folders which needs to be present based on the object files
BUILD_TREE = $(sort $(dir $(OBJECTS)))


#######################################
# Build Firmware
#######################################

FINAL_TARGET_NAME = $(RELEASE_DIRECTORY)/$(TARGET)
ELF_TARGET = $(FINAL_TARGET_NAME).elf


#######################################
# All
#######################################
# default action: build all
all: $(BUILD_TREE)
all: $(FINAL_TARGET_NAME).elf
all: $(FINAL_TARGET_NAME).hex
all: $(FINAL_TARGET_NAME).bin

#######################################
# Build rules
#######################################

# C Files
$(RELEASE_DIRECTORY)/%.o: %.c STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(CC) -c $(C_FLAGS) $< -o $@

# C++ files
$(RELEASE_DIRECTORY)/%.o: %.cpp STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(CXX) -c $(CXX_FLAGS) $< -o $@
$(RELEASE_DIRECTORY)/%.o: %.cc STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(CXX) -c $(CXX_FLAGS) $< -o $@
$(RELEASE_DIRECTORY)/%.o: %.cp STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(CXX) -c $(CXX_FLAGS) $< -o $@
$(RELEASE_DIRECTORY)/%.o: %.CPP STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(CXX) -c $(CXX_FLAGS) $< -o $@
$(RELEASE_DIRECTORY)/%.o: %.c++ STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(CXX) -c $(CXX_FLAGS) $< -o $@
$(RELEASE_DIRECTORY)/%.o: %.C STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(CXX) -c $(CXX_FLAGS) $< -o $@

# Assembly files
$(RELEASE_DIRECTORY)/%.o: %.s STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(AS) -c $(ASM_FLAGS) $< -o $@
$(RELEASE_DIRECTORY)/%.o: %.S STM32Make.mk | $(BUILD_DIR) $(BUILD_TREE)
	$(AS) -c $(ASM_FLAGS) $< -o $@

# ELF Firmware
$(RELEASE_DIRECTORY)/$(TARGET).elf: $(OBJECTS) STM32Make.mk | $(BUILD_TREE)
	$(CC) $(OBJECTS) $(LINKER_FLAGS) -o $@
	$(SZ) $@


$(RELEASE_DIRECTORY)/%.hex: $(RELEASE_DIRECTORY)/%.elf | $(BUILD_TREE)
	$(HEX) $< $@

$(RELEASE_DIRECTORY)/%.bin: $(RELEASE_DIRECTORY)/%.elf | $(BUILD_TREE)
	$(BIN) $< $@

$(BUILD_DIR):
	$(call mkdir_function, $@)

$(BUILD_TREE):
	$(call mkdir_function, $@)


#######################################
# flash
#######################################
flash: $(FINAL_TARGET_NAME).elf
	"$(OPENOCD)" -f ./openocd.cfg -c "program $(FINAL_TARGET_NAME).elf verify reset exit"

#######################################
# erase
#######################################
erase: $(BUILD_DIRECTORY)/$(TARGET).elf
	"$(OPENOCD)" -f ./openocd.cfg -c "init; reset halt; stm32f4x mass_erase 0; exit"

#######################################
# clean up
#######################################

clean:
	$(REMOVE_DIRECTORY_COMMAND) $(BUILD_DIRECTORY)

#######################################
# custom makefile rules
#######################################



#######################################
# dependencies
#######################################
-include $(DEPENDENCY_FILES)

# *** EOF ***